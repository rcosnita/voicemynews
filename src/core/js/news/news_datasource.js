/**
 * This module provides the model for news data sources. Each specific news datasource must inherit from
 * NewsBasicDatasource class.
 * @module voicemynews/js/news/news_datasource
 */
"use strict";

const NotImplementedMethodException = require("js/exceptions/notimplemented").NotImplementedMethodException;

/**
 * Provides a model which describes what an image from a news is.
 *
 * @alias module:voicemynews/js/news/news_datasource.NewsImageModel
 */
class NewsImageModel {
    constructor(url, width, height) {
        this.url = url;
        this.width = width;
        this.height = height;
    }
}

/**
 * Provides a model which stores the attributes of a news paragraph.
 *
 * @alias module:voicemynews/js/news/news_datasource.NewsParagraphModel
 */
class NewsParagraphModel {
    /**
     * Established what information needs to be known upfront in order to build a news paragraph.
     *
     * @param {String} content the paragraph content text.
     * @param {Array} images the array of images belonging to this paragraph. See {@link NewsImageModel} for more information.
     * @param {Number} subheadingLevel holds a numeric value which tells what kind of subheading this paragraph is.
     * If the paragraph is regular, this will be undefined.
     */
    constructor(content, images, subheadingLevel) {
        this.content = content;
        this.images = images || [];
        this.subheadingLevel = subheadingLevel;
    }
}

/**
 * Provides the model which we are using in the application in order to work with news. Each concrete datasource
 * will build news model in order to correctly integrate into voicemynews.
 *
 * @alias module:voicemynews/js/news/news_datasource.NewsModel
 */
class NewsModel {
    /**
     * Establishes what needs to be known upfront before being able to build a news model.
     *
     * @param {String} newsId News unique identifier. It will be usually generated by the app backend.
     * @param {String} headline the news headline extracted from rss.
     * @param {String} url The url from where we can extract more information. It usually points to the news html page.
     * @param {Array} images An array of images currently associated with the news. See {@link NewsImageModel} for more information.
     * @param {Array} paragraphs An array of paragraphs. See {@link NewsParagraphModel} for more information.
     * @param {Array} contributedBy An array of strings describing who contributed to the article.
     */
    constructor(newsId, headline, url, images, paragraphs, contributedBy) {
        this.newsId = newsId;
        this.headline = headline;
        this.url = url;
        this.images = images || {};
        this.paragraphs = paragraphs || [];
        this.contributedBy = contributedBy || [];
    }
}

/**
 * Provides an abstract news datasource model. Each concrete data source must inherit from this. In simple
 * terms we expect from a news data source to be able to represent news free format into voicemynews
 * specific format.
 * @alias module:voicemynews/js/news/news_datasource.NewsDataSourceAbstract
 */
class NewsDataSourceAbstract {
    /**
     * Obtains a news model from the given url. Internally, it should use the standard httpclient in order to
     * fetch the data and parse it if everything is fine.
     *
     * @public
     * @method
     * @param {String} url the url where the news is located.
     * @param {JSON} rssDesc A json object containing the news descriptor as provided by rss page.
     * @returns {Promise} which will be resolved to the actual news model {@link NewsModel} or an exception descriptor.
     */
    fetchNews(url, rssDesc) {
        throw new NotImplementedMethodException("fetchNews(url) not implemented ...");
    }

    /**
     * Parses the given content and returns the news model. Each data source can provide its own parsing logic. There is no
     * default implementation because each concrete datasource can provides its own implementation depending on what format
     * is used for storing the news (e.g html, xml, something else).
     *
     * @public
     * @method
     * @param {String} content The string content we want to parse into news model. Usually, this content is a raw representation fetched from the news link.
     * @param {JSON} rssDesc A json object containing the news descriptor as provided by rss page.
     */
    parseContent(content, rssDesc) {
        throw new NotImplementedMethodException("parseContent(url) not implemented ...");
    }
}

module.exports = {
    NewsDataSourceAbstract: NewsDataSourceAbstract,
    NewsImageModel: NewsImageModel,
    NewsParagraphModel: NewsParagraphModel,
    NewsModel: NewsModel
}